<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="pgStudio" basedir="." default="war">
 
    <property name="gwt.module.name" value="com.openscg.pgstudio.PgStudio"/>
    <property name="server.resources.name" value="server_resources"/>
    <property name="file.name" value="pgstudio"/>
    <property name="file.version" value="1.2"/>
    <property name="jar.name" value="${file.name}.jar"/>
    <property name="war.name" value="${file.name}.war"/>
    <property name="src.dir" location="src"/>
    <property name="server.resources.dir" location="war/${server.resources.name}"/>
    <property name="build.dir" location="build"/>    
    <property name="build.server.resources.dir" location="war/WEB-INF/classes/server_resources"/>        
    <property name="lib.dir" location="lib"/>
    <property name="gwt.client.dir" location="com/openscg/pgstudio/client"/>
     
    <property name="ivy.install.version" value="2.3.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <path id="project.classpath">        
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </path>
         
    <presetdef name="javac">
        <javac includeantruntime="false" />
    </presetdef>

    <target name="prepare">
      <mkdir dir="${build.dir}"/>
    </target>
        
    <target name="clean">
      <delete dir="${build.dir}"/>
      <delete dir="gwt-unitCache"/>
      <delete dir="war/WEB-INF/deploy"/>
      <delete dir="war/WEB-INF/classes"/>
      <delete dir="deploy"/>
      <delete dir="war/com.openscg.pgstudio.PgStudio"/>
      <delete file="${war.name}"/>
      <delete file="${lib.dir}/${jar.name}"/>
    </target>
        
    <target name="clean-all" depends="clean">
      <delete dir="lib"/>
      <delete dir="war/WEB-INF/lib"/>
    </target>

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="resolve" depends="init-ivy">
        <ivy:retrieve />
    </target>

    <!-- Compile the java source code using javac -->
    <target name="compile" depends="prepare, resolve">        
      <javac srcdir="${src.dir}" destdir="${build.dir}">
        <classpath refid="project.classpath"/>
      </javac>        
    </target>
      
    <!-- Invoke the GWT compiler to create the Javascript for us -->
    <target name="gwt-compile" depends="compile">
      <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
        <classpath>
          <pathelement location="${src.dir}"/>                
          <pathelement location="${build.dir}"/>
          <path refid="project.classpath"/>
        </classpath>
        <jvmarg value="-Xmx384M"/>
        <arg value="${gwt.module.name}"/>
      </java>
    </target>
         
    <!-- Package the compiled Java source into a JAR file -->
    <target name="jar" depends="compile">        
      <jar jarfile="${lib.dir}/${jar.name}" basedir="${build.dir}/">
        <!-- Don't wrap any of the client only code into the JAR -->
        <exclude name="${gwt.client.dir}/**/*.class"/>
      </jar>    
    </target>
            
    <!-- Copy the static server resources into the required 
    directory ready for packaging -->    
    <target name="copy-resources">  
       <copy todir="war/WEB-INF/lib">
           <fileset dir="lib"/>
       </copy>
    </target>
      
    <!-- Package the JAR file, Javascript, static resources 
    and external libraries into a WAR file -->
    <target name="war" depends="gwt-compile, jar, copy-resources">
      <tstamp>
        <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
      </tstamp>
      <war basedir="war" destfile="${war.name}" webxml="war/WEB-INF/web.xml">
        <exclude name="WEB-INF/**" />
        <exclude name="${server.resources.name}/**"/>
        <webinf dir="war/WEB-INF/">
          <include name="classes/${server.resources.name}/**" />
          <include name="**/*.jar" />
          <exclude name="**/gwt-dev*.jar" />
          <exclude name="**/gwt-user*.jar" />
          <exclude name="**/*sources*.jar" />
          <exclude name="**/*javadoc*.jar" />
        </webinf>
        <manifest>
          <attribute name="Built-On" value="${TODAY}" />
          <attribute name="Implementation-Version" value="${file.version}" />
        </manifest>
      </war>
    </target>
        
    <!-- Create the deployment packages (optional) -->
	<target name="deploy" depends="war">
            <mkdir dir="deploy"/>
	    <copy file="${war.name}" todir="deploy" />

            <tar destfile="deploy/${file.name}_${file.version}.tar.gz" compression="gzip">
              <tarfileset dir="deploy">
                 <include name="${war.name}"/>
              </tarfileset>
            </tar>

            <tar destfile="deploy/${file.name}_${file.version}.tar.bz2" compression="bzip2">
              <tarfileset dir="deploy">
                 <include name="${war.name}"/>
              </tarfileset>
            </tar>

            <zip destfile="deploy/${file.name}_${file.version}.zip">
              <zipfileset dir="deploy">
                  <include name="${war.name}"/>
              </zipfileset>
            </zip>

            <mkdir dir="deploy/${file.name}-src_${file.version}"/>
            <copy file="build.xml" todir="deploy/${file.name}-src_${file.version}"/>
            <copy file="ivy.xml" todir="deploy/${file.name}-src_${file.version}"/>
            <copy file="README" todir="deploy/${file.name}-src_${file.version}"/>
            <copy file="LICENSE" todir="deploy/${file.name}-src_${file.version}"/>
            <copy todir="deploy/${file.name}-src_${file.version}/src">
                <fileset dir="src"/>
            </copy>
            <copy file="war/PgStudio.jsp" todir="deploy/${file.name}-src_${file.version}/war"/>
            <copy file="war/PgStudio.css" todir="deploy/${file.name}-src_${file.version}/war"/>
            <copy todir="deploy/${file.name}-src_${file.version}/war/images">
                <fileset dir="war/images"/>
            </copy>
            <copy todir="deploy/${file.name}-src_${file.version}/war/server_resources">
                <fileset dir="war/server_resources"/>
            </copy>
             <copy file="war/WEB-INF/web.xml" todir="deploy/${file.name}-src_${file.version}/war/WEB-INF"/>

            <tar destfile="deploy/${file.name}-src_${file.version}.tar.gz" compression="gzip">
                <tarfileset dir="deploy">
                  <include name="${file.name}-src_${file.version}/**"/>
                </tarfileset>
            </tar>

            <tar destfile="deploy/${file.name}-src_${file.version}.tar.bz2" compression="bzip2">
               <tarfileset dir="deploy">
                  <include name="${file.name}-src_${file.version}/**"/>
                </tarfileset>
            </tar>

            <zip destfile="deploy/${file.name}-src_${file.version}.zip">
              <zipfileset dir="deploy">
                  <include name="${file.name}-src_${file.version}/**"/>
              </zipfileset>
            </zip>

	</target>
    
</project>
